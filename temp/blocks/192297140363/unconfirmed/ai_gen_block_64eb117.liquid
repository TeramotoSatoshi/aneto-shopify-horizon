{% doc %}
  @prompt
    Create a reusable block that displays color metafield information on product pages and homepage. The block should:
    
    1. Display color information from product metafields
    2. Show color swatches or color names visually
    3. Be customizable with different display styles (color circles, squares, or text labels)
    4. Support multiple colors if needed
    5. Include settings for color size, spacing, and layout
    6. Work on both product detail pages and homepage sections
    7. Have options to show/hide color labels
    8. Be fully responsive for mobile and desktop
    9. Include hover effects for better interactivity
    
    The block should be flexible enough to display product color variants or color metadata in an attractive, user-friendly way.
{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-color-metafield-{{ ai_gen_id }} {
    display: flex;
    flex-direction: column;
    gap: {{ block.settings.section_spacing }}px;
    padding: {{ block.settings.padding }}px;
    background-color: {{ block.settings.background_color }};
    border-radius: {{ block.settings.border_radius }}px;
  }

  .ai-color-metafield__title-{{ ai_gen_id }} {
    font-size: {{ block.settings.title_size }}px;
    color: {{ block.settings.title_color }};
    margin: 0;
    font-weight: 600;
    line-height: 1.2;
  }

  .ai-color-metafield__colors-{{ ai_gen_id }} {
    display: flex;
    flex-wrap: wrap;
    gap: {{ block.settings.color_spacing }}px;
    align-items: center;
  }

  .ai-color-metafield__color-item-{{ ai_gen_id }} {
    display: flex;
    align-items: center;
    gap: 8px;
    position: relative;
  }

  .ai-color-metafield__swatch-{{ ai_gen_id }} {
    width: {{ block.settings.color_size }}px;
    height: {{ block.settings.color_size }}px;
    border-radius: {% if block.settings.color_style == 'circle' %}50%{% elsif block.settings.color_style == 'rounded' %}{{ block.settings.color_size | divided_by: 4 }}px{% else %}0{% endif %};
    border: {{ block.settings.border_width }}px solid {{ block.settings.border_color }};
    cursor: pointer;
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
    flex-shrink: 0;
  }

  .ai-color-metafield__swatch-{{ ai_gen_id }}:hover {
    transform: scale({{ block.settings.hover_scale }});
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  }

  .ai-color-metafield__swatch-{{ ai_gen_id }}--gradient {
    background: linear-gradient(45deg, var(--color-1), var(--color-2));
  }

  .ai-color-metafield__swatch-{{ ai_gen_id }}--pattern {
    background-image: 
      linear-gradient(45deg, #ccc 25%, transparent 25%), 
      linear-gradient(-45deg, #ccc 25%, transparent 25%), 
      linear-gradient(45deg, transparent 75%, #ccc 75%), 
      linear-gradient(-45deg, transparent 75%, #ccc 75%);
    background-size: 8px 8px;
    background-position: 0 0, 0 4px, 4px -4px, -4px 0px;
  }

  .ai-color-metafield__label-{{ ai_gen_id }} {
    font-size: {{ block.settings.label_size }}px;
    color: {{ block.settings.label_color }};
    font-weight: 500;
    line-height: 1.3;
    {% unless block.settings.show_labels %}display: none;{% endunless %}
  }

  .ai-color-metafield__tooltip-{{ ai_gen_id }} {
    position: absolute;
    bottom: calc(100% + 8px);
    left: 50%;
    transform: translateX(-50%);
    background-color: {{ block.settings.tooltip_bg_color }};
    color: {{ block.settings.tooltip_text_color }};
    padding: 6px 10px;
    border-radius: 6px;
    font-size: 12px;
    white-space: nowrap;
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s ease;
    pointer-events: none;
    z-index: 10;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
  }

  .ai-color-metafield__tooltip-{{ ai_gen_id }}::after {
    content: '';
    position: absolute;
    top: 100%;
    left: 50%;
    transform: translateX(-50%);
    border: 4px solid transparent;
    border-top-color: {{ block.settings.tooltip_bg_color }};
  }

  .ai-color-metafield__swatch-{{ ai_gen_id }}:hover .ai-color-metafield__tooltip-{{ ai_gen_id }} {
    opacity: 1;
    visibility: visible;
  }

  .ai-color-metafield__text-only-{{ ai_gen_id }} {
    display: inline-flex;
    align-items: center;
    padding: 8px 16px;
    background-color: {{ block.settings.text_bg_color }};
    color: {{ block.settings.text_color }};
    border: 1px solid {{ block.settings.text_border_color }};
    border-radius: {{ block.settings.text_border_radius }}px;
    font-size: {{ block.settings.label_size }}px;
    font-weight: 500;
    transition: all 0.3s ease;
    cursor: pointer;
  }

  .ai-color-metafield__text-only-{{ ai_gen_id }}:hover {
    background-color: {{ block.settings.text_hover_bg_color }};
    color: {{ block.settings.text_hover_color }};
    border-color: {{ block.settings.text_hover_border_color }};
    transform: translateY(-1px);
  }

  .ai-color-metafield__empty-state-{{ ai_gen_id }} {
    padding: 20px;
    text-align: center;
    color: #999;
    font-style: italic;
    background-color: #f9f9f9;
    border-radius: 8px;
    border: 1px dashed #ddd;
  }

  @media screen and (max-width: 749px) {
    .ai-color-metafield__colors-{{ ai_gen_id }} {
      gap: {{ block.settings.color_spacing | times: 0.8 }}px;
    }
    
    .ai-color-metafield__swatch-{{ ai_gen_id }} {
      width: {{ block.settings.color_size | times: 0.9 }}px;
      height: {{ block.settings.color_size | times: 0.9 }}px;
    }
    
    .ai-color-metafield__title-{{ ai_gen_id }} {
      font-size: {{ block.settings.title_size | times: 0.9 }}px;
    }
  }
{% endstyle %}

<color-metafield-display-{{ ai_gen_id }}
  class="ai-color-metafield-{{ ai_gen_id }}"
  {{ block.shopify_attributes }}
>
  {% liquid
    assign color_data = null
    assign colors_array = null
    
    if product and block.settings.metafield_namespace != blank and block.settings.metafield_key != blank
      assign metafield_value = product.metafields[block.settings.metafield_namespace][block.settings.metafield_key]
      if metafield_value != blank
        assign color_data = metafield_value
      endif
    elsif block.settings.fallback_colors != blank
      assign color_data = block.settings.fallback_colors
    endif
    
    if color_data != blank
      assign colors_array = color_data | split: ','
    endif
  %}

  {% if block.settings.title != blank %}
    <h3 class="ai-color-metafield__title-{{ ai_gen_id }}">{{ block.settings.title }}</h3>
  {% endif %}

  {% if colors_array != blank and colors_array.size > 0 %}
    <div class="ai-color-metafield__colors-{{ ai_gen_id }}">
      {% for color_item in colors_array %}
        {% liquid
          assign color_parts = color_item | strip | split: '|'
          assign color_value = color_parts[0] | strip
          assign color_name = color_parts[1] | strip | default: color_value
          
          assign is_hex_color = false
          assign is_gradient = false
          assign gradient_colors = null
          
          if color_value contains '#'
            assign is_hex_color = true
          elsif color_value contains 'gradient'
            assign is_gradient = true
            assign gradient_parts = color_value | remove: 'gradient(' | remove: ')' | split: ','
            assign gradient_colors = gradient_parts
          endif
        %}

        {% if block.settings.display_style == 'text_only' %}
          <span class="ai-color-metafield__text-only-{{ ai_gen_id }}">
            {{ color_name }}
          </span>
        {% else %}
          <div class="ai-color-metafield__color-item-{{ ai_gen_id }}">
            {% if is_gradient and gradient_colors.size >= 2 %}
              <div 
                class="ai-color-metafield__swatch-{{ ai_gen_id }} ai-color-metafield__swatch-{{ ai_gen_id }}--gradient"
                style="
                  --color-1: {{ gradient_colors[0] | strip }};
                  --color-2: {{ gradient_colors[1] | strip }};
                "
                data-color="{{ color_value }}"
                data-name="{{ color_name }}"
              >
                {% if block.settings.show_tooltips %}
                  <div class="ai-color-metafield__tooltip-{{ ai_gen_id }}">{{ color_name }}</div>
                {% endif %}
              </div>
            {% elsif is_hex_color %}
              <div 
                class="ai-color-metafield__swatch-{{ ai_gen_id }}"
                style="background-color: {{ color_value }};"
                data-color="{{ color_value }}"
                data-name="{{ color_name }}"
              >
                {% if block.settings.show_tooltips %}
                  <div class="ai-color-metafield__tooltip-{{ ai_gen_id }}">{{ color_name }}</div>
                {% endif %}
              </div>
            {% else %}
              <div 
                class="ai-color-metafield__swatch-{{ ai_gen_id }} ai-color-metafield__swatch-{{ ai_gen_id }}--pattern"
                data-color="{{ color_value }}"
                data-name="{{ color_name }}"
              >
                {% if block.settings.show_tooltips %}
                  <div class="ai-color-metafield__tooltip-{{ ai_gen_id }}">{{ color_name }}</div>
                {% endif %}
              </div>
            {% endif %}
            
            {% if block.settings.show_labels %}
              <span class="ai-color-metafield__label-{{ ai_gen_id }}">{{ color_name }}</span>
            {% endif %}
          </div>
        {% endif %}
      {% endfor %}
    </div>
  {% else %}
    <div class="ai-color-metafield__empty-state-{{ ai_gen_id }}">
      {% if product %}
        No color information available for this product
      {% else %}
        Add color metafield data or configure fallback colors
      {% endif %}
    </div>
  {% endif %}
</color-metafield-display-{{ ai_gen_id }}>

<script>
  (function() {
    class ColorMetafieldDisplay{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
      }

      connectedCallback() {
        this.swatches = this.querySelectorAll('.ai-color-metafield__swatch-{{ ai_gen_id }}');
        this.textItems = this.querySelectorAll('.ai-color-metafield__text-only-{{ ai_gen_id }}');
        this.setupEventListeners();
      }

      setupEventListeners() {
        this.swatches.forEach((swatch) => {
          swatch.addEventListener('click', (e) => {
            const colorValue = e.currentTarget.dataset.color;
            const colorName = e.currentTarget.dataset.name;
            this.handleColorClick(colorValue, colorName, e.currentTarget);
          });
        });

        this.textItems.forEach((item) => {
          item.addEventListener('click', (e) => {
            const colorName = e.currentTarget.textContent.trim();
            this.handleColorClick(null, colorName, e.currentTarget);
          });
        });
      }

      handleColorClick(colorValue, colorName, element) {
        this.dispatchEvent(new CustomEvent('colorSelected', {
          detail: {
            color: colorValue,
            name: colorName,
            element: element
          },
          bubbles: true
        }));

        element.style.transform = 'scale(0.95)';
        setTimeout(() => {
          element.style.transform = '';
        }, 150);
      }
    }

    customElements.define('color-metafield-display-{{ ai_gen_id }}', ColorMetafieldDisplay{{ ai_gen_id }});
  })();
</script>

{% schema %}
{
  "name": "Color metafield display",
  "tag": null,
  "settings": [
    {
      "type": "header",
      "content": "Metafield configuration"
    },
    {
      "type": "text",
      "id": "metafield_namespace",
      "label": "Metafield namespace",
      "default": "custom",
      "info": "The namespace of your color metafield"
    },
    {
      "type": "text",
      "id": "metafield_key",
      "label": "Metafield key",
      "default": "colors",
      "info": "The key of your color metafield"
    },
    {
      "type": "textarea",
      "id": "fallback_colors",
      "label": "Fallback colors",
      "info": "Colors to show when metafield is empty. Format: #FF0000|Red, #00FF00|Green, gradient(#FF0000,#0000FF)|Red to Blue",
      "default": "#FF0000|Red, #00FF00|Green, #0000FF|Blue"
    },
    {
      "type": "header",
      "content": "Display settings"
    },
    {
      "type": "text",
      "id": "title",
      "label": "Title",
      "default": "Available Colors"
    },
    {
      "type": "select",
      "id": "display_style",
      "label": "Display style",
      "options": [
        {
          "value": "swatches",
          "label": "Color swatches"
        },
        {
          "value": "text_only",
          "label": "Text labels only"
        }
      ],
      "default": "swatches"
    },
    {
      "type": "select",
      "id": "color_style",
      "label": "Swatch style",
      "options": [
        {
          "value": "circle",
          "label": "Circle"
        },
        {
          "value": "square",
          "label": "Square"
        },
        {
          "value": "rounded",
          "label": "Rounded square"
        }
      ],
      "default": "circle"
    },
    {
      "type": "checkbox",
      "id": "show_labels",
      "label": "Show color labels",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_tooltips",
      "label": "Show tooltips on hover",
      "default": true
    },
    {
      "type": "header",
      "content": "Size and spacing"
    },
    {
      "type": "range",
      "id": "color_size",
      "min": 20,
      "max": 60,
      "step": 2,
      "unit": "px",
      "label": "Swatch size",
      "default": 34
    },
    {
      "type": "range",
      "id": "color_spacing",
      "min": 4,
      "max": 20,
      "step": 2,
      "unit": "px",
      "label": "Spacing between colors",
      "default": 12
    },
    {
      "type": "range",
      "id": "section_spacing",
      "min": 8,
      "max": 32,
      "step": 2,
      "unit": "px",
      "label": "Title to colors spacing",
      "default": 16
    },
    {
      "type": "range",
      "id": "padding",
      "min": 0,
      "max": 40,
      "step": 2,
      "unit": "px",
      "label": "Block padding",
      "default": 0
    },
    {
      "type": "range",
      "id": "border_radius",
      "min": 0,
      "max": 20,
      "step": 1,
      "unit": "px",
      "label": "Block border radius",
      "default": 0
    },
    {
      "type": "header",
      "content": "Swatch styling"
    },
    {
      "type": "range",
      "id": "border_width",
      "min": 0,
      "max": 4,
      "step": 1,
      "unit": "px",
      "label": "Swatch border width",
      "default": 1
    },
    {
      "type": "color",
      "id": "border_color",
      "label": "Swatch border color",
      "default": "#e6e6e6"
    },
    {
      "type": "range",
      "id": "hover_scale",
      "min": 1.0,
      "max": 1.3,
      "step": 0.1,
      "label": "Hover scale effect",
      "default": 1.1
    },
    {
      "type": "header",
      "content": "Typography"
    },
    {
      "type": "range",
      "id": "title_size",
      "min": 12,
      "max": 32,
      "step": 1,
      "unit": "px",
      "label": "Title size",
      "default": 18
    },
    {
      "type": "range",
      "id": "label_size",
      "min": 10,
      "max": 18,
      "step": 1,
      "unit": "px",
      "label": "Label size",
      "default": 14
    },
    {
      "type": "color",
      "id": "title_color",
      "label": "Title color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "label_color",
      "label": "Label color",
      "default": "#2c2d2e"
    },
    {
      "type": "header",
      "content": "Colors"
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Background color",
      "default": "rgba(0,0,0,0)"
    },
    {
      "type": "color",
      "id": "tooltip_bg_color",
      "label": "Tooltip background",
      "default": "#333333"
    },
    {
      "type": "color",
      "id": "tooltip_text_color",
      "label": "Tooltip text",
      "default": "#ffffff"
    },
    {
      "type": "header",
      "content": "Text-only style"
    },
    {
      "type": "range",
      "id": "text_border_radius",
      "min": 0,
      "max": 20,
      "step": 1,
      "unit": "px",
      "label": "Text border radius",
      "default": 14
    },
    {
      "type": "color",
      "id": "text_bg_color",
      "label": "Text background",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Text color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "text_border_color",
      "label": "Text border color",
      "default": "#e6e6e6"
    },
    {
      "type": "color",
      "id": "text_hover_bg_color",
      "label": "Text hover background",
      "default": "#f5f5f5"
    },
    {
      "type": "color",
      "id": "text_hover_color",
      "label": "Text hover color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "text_hover_border_color",
      "label": "Text hover border",
      "default": "#000000"
    }
  ],
  "presets": [
    {
      "name": "Color metafield display"
    }
  ]
}
{% endschema %}