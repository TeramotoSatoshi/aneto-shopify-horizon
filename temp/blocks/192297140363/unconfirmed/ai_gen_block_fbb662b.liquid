{% doc %}
  @prompt
    Create a reusable block that displays color metafield information on product pages and homepage. The block should:
    
    1. Display color information from product metafields
    2. Show color swatches or color names visually
    3. Be customizable with different display styles (color circles, squares, or text labels)
    4. Support multiple colors if needed
    5. Include settings for color size, spacing, and layout
    6. Work on both product detail pages and homepage sections
    7. Have options to show/hide color labels
    8. Be fully responsive for mobile and desktop
    9. Include hover effects for better interactivity
    
    The block should be flexible enough to display product color variants or color metadata in an attractive, user-friendly way., Products Cardの子要素として、選択されている商品に紐づけるようにして
{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-color-metafield-{{ ai_gen_id }} {
    display: flex;
    flex-direction: column;
    gap: {{ block.settings.section_spacing }}px;
    padding: {{ block.settings.padding }}px;
    background-color: {{ block.settings.background_color }};
    border-radius: {{ block.settings.border_radius }}px;
    margin-top: {{ block.settings.top_margin }}px;
  }

  .ai-color-metafield__title-{{ ai_gen_id }} {
    font-size: {{ block.settings.title_size }}px;
    color: {{ block.settings.title_color }};
    margin: 0;
    font-weight: 600;
    line-height: 1.2;
  }

  .ai-color-metafield__colors-{{ ai_gen_id }} {
    display: flex;
    flex-wrap: wrap;
    gap: {{ block.settings.color_spacing }}px;
    align-items: center;
    justify-content: {% if block.settings.alignment == 'center' %}center{% elsif block.settings.alignment == 'right' %}flex-end{% else %}flex-start{% endif %};
  }

  .ai-color-metafield__color-item-{{ ai_gen_id }} {
    display: flex;
    align-items: center;
    gap: 6px;
    position: relative;
  }

  .ai-color-metafield__swatch-{{ ai_gen_id }} {
    width: {{ block.settings.color_size }}px;
    height: {{ block.settings.color_size }}px;
    border-radius: {% if block.settings.color_style == 'circle' %}50%{% elsif block.settings.color_style == 'rounded' %}{{ block.settings.color_size | divided_by: 4 }}px{% else %}0{% endif %};
    border: {{ block.settings.border_width }}px solid {{ block.settings.border_color }};
    cursor: pointer;
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
    flex-shrink: 0;
  }

  .ai-color-metafield__swatch-{{ ai_gen_id }}:hover {
    transform: scale({{ block.settings.hover_scale }});
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
  }

  .ai-color-metafield__swatch-{{ ai_gen_id }}--gradient {
    background: linear-gradient(45deg, var(--color-1), var(--color-2));
  }

  .ai-color-metafield__swatch-{{ ai_gen_id }}--pattern {
    background-image: 
      linear-gradient(45deg, #ccc 25%, transparent 25%), 
      linear-gradient(-45deg, #ccc 25%, transparent 25%), 
      linear-gradient(45deg, transparent 75%, #ccc 75%), 
      linear-gradient(-45deg, transparent 75%, #ccc 75%);
    background-size: 6px 6px;
    background-position: 0 0, 0 3px, 3px -3px, -3px 0px;
  }

  .ai-color-metafield__label-{{ ai_gen_id }} {
    font-size: {{ block.settings.label_size }}px;
    color: {{ block.settings.label_color }};
    font-weight: 500;
    line-height: 1.3;
    {% unless block.settings.show_labels %}display: none;{% endunless %}
  }

  .ai-color-metafield__tooltip-{{ ai_gen_id }} {
    position: absolute;
    bottom: calc(100% + 6px);
    left: 50%;
    transform: translateX(-50%);
    background-color: {{ block.settings.tooltip_bg_color }};
    color: {{ block.settings.tooltip_text_color }};
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 11px;
    white-space: nowrap;
    opacity: 0;
    visibility: hidden;
    transition: all 0.2s ease;
    pointer-events: none;
    z-index: 10;
    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.15);
  }

  .ai-color-metafield__tooltip-{{ ai_gen_id }}::after {
    content: '';
    position: absolute;
    top: 100%;
    left: 50%;
    transform: translateX(-50%);
    border: 3px solid transparent;
    border-top-color: {{ block.settings.tooltip_bg_color }};
  }

  .ai-color-metafield__swatch-{{ ai_gen_id }}:hover .ai-color-metafield__tooltip-{{ ai_gen_id }} {
    opacity: 1;
    visibility: visible;
  }

  .ai-color-metafield__text-only-{{ ai_gen_id }} {
    display: inline-flex;
    align-items: center;
    padding: 4px 10px;
    background-color: {{ block.settings.text_bg_color }};
    color: {{ block.settings.text_color }};
    border: 1px solid {{ block.settings.text_border_color }};
    border-radius: {{ block.settings.text_border_radius }}px;
    font-size: {{ block.settings.label_size }}px;
    font-weight: 500;
    transition: all 0.2s ease;
    cursor: pointer;
    text-decoration: none;
  }

  .ai-color-metafield__text-only-{{ ai_gen_id }}:hover {
    background-color: {{ block.settings.text_hover_bg_color }};
    color: {{ block.settings.text_hover_color }};
    border-color: {{ block.settings.text_hover_border_color }};
    transform: translateY(-1px);
  }

  .ai-color-metafield__compact-{{ ai_gen_id }} {
    gap: {{ block.settings.section_spacing | divided_by: 2 }}px;
  }

  .ai-color-metafield__compact-{{ ai_gen_id }} .ai-color-metafield__title-{{ ai_gen_id }} {
    font-size: {{ block.settings.title_size | times: 0.9 }}px;
  }

  .ai-color-metafield__compact-{{ ai_gen_id }} .ai-color-metafield__colors-{{ ai_gen_id }} {
    gap: {{ block.settings.color_spacing | times: 0.8 }}px;
  }

  .ai-color-metafield__inline-{{ ai_gen_id }} {
    flex-direction: row;
    align-items: center;
    gap: {{ block.settings.section_spacing }}px;
  }

  .ai-color-metafield__inline-{{ ai_gen_id }} .ai-color-metafield__title-{{ ai_gen_id }} {
    flex-shrink: 0;
  }

  @media screen and (max-width: 749px) {
    .ai-color-metafield__colors-{{ ai_gen_id }} {
      gap: {{ block.settings.color_spacing | times: 0.7 }}px;
    }
    
    .ai-color-metafield__swatch-{{ ai_gen_id }} {
      width: {{ block.settings.color_size | times: 0.85 }}px;
      height: {{ block.settings.color_size | times: 0.85 }}px;
    }
    
    .ai-color-metafield__title-{{ ai_gen_id }} {
      font-size: {{ block.settings.title_size | times: 0.9 }}px;
    }

    .ai-color-metafield__inline-{{ ai_gen_id }} {
      flex-direction: column;
      align-items: flex-start;
      gap: {{ block.settings.section_spacing | times: 0.7 }}px;
    }
  }
{% endstyle %}

<color-metafield-card-{{ ai_gen_id }}
  class="ai-color-metafield-{{ ai_gen_id }} {% if block.settings.compact_mode %}ai-color-metafield__compact-{{ ai_gen_id }}{% endif %} {% if block.settings.layout == 'inline' %}ai-color-metafield__inline-{{ ai_gen_id }}{% endif %}"
  data-product-id="{{ card_product.id | default: product.id }}"
  {{ block.shopify_attributes }}
>
  {% liquid
    assign current_product = card_product | default: product
    assign color_data = null
    assign colors_array = null
    
    if current_product and block.settings.metafield_namespace != blank and block.settings.metafield_key != blank
      assign metafield_value = current_product.metafields[block.settings.metafield_namespace][block.settings.metafield_key]
      if metafield_value != blank
        assign color_data = metafield_value
      endif
    endif
    
    if color_data == blank and block.settings.use_variant_colors
      assign variant_colors = ''
      for variant in current_product.variants
        if variant.option1 contains 'color' or variant.option2 contains 'color' or variant.option3 contains 'color'
          assign color_option = variant.option1
          if variant.option2 contains 'color'
            assign color_option = variant.option2
          elsif variant.option3 contains 'color'
            assign color_option = variant.option3
          endif
          unless variant_colors contains color_option
            if variant_colors != blank
              assign variant_colors = variant_colors | append: ',' | append: color_option
            else
              assign variant_colors = color_option
            endif
          endunless
        endif
      endfor
      if variant_colors != blank
        assign color_data = variant_colors
      endif
    endif
    
    if color_data == blank and block.settings.fallback_colors != blank
      assign color_data = block.settings.fallback_colors
    endif
    
    if color_data != blank
      assign colors_array = color_data | split: ','
    endif
  %}

  {% if colors_array != blank and colors_array.size > 0 %}
    {% if block.settings.title != blank %}
      <h4 class="ai-color-metafield__title-{{ ai_gen_id }}">{{ block.settings.title }}</h4>
    {% endif %}

    <div class="ai-color-metafield__colors-{{ ai_gen_id }}">
      {% for color_item in colors_array limit: block.settings.max_colors %}
        {% liquid
          assign color_parts = color_item | strip | split: '|'
          assign color_value = color_parts[0] | strip
          assign color_name = color_parts[1] | strip | default: color_value
          
          assign is_hex_color = false
          assign is_gradient = false
          assign gradient_colors = null
          
          if color_value contains '#'
            assign is_hex_color = true
          elsif color_value contains 'gradient'
            assign is_gradient = true
            assign gradient_parts = color_value | remove: 'gradient(' | remove: ')' | split: ','
            assign gradient_colors = gradient_parts
          endif
          
          assign variant_with_color = null
          if current_product and block.settings.link_to_variants
            for variant in current_product.variants
              if variant.option1 == color_name or variant.option2 == color_name or variant.option3 == color_name
                assign variant_with_color = variant
                break
              endif
            endfor
          endif
        %}

        {% if block.settings.display_style == 'text_only' %}
          {% if variant_with_color and block.settings.link_to_variants %}
            <a 
              href="{{ current_product.url }}?variant={{ variant_with_color.id }}"
              class="ai-color-metafield__text-only-{{ ai_gen_id }}"
              data-variant-id="{{ variant_with_color.id }}"
            >
              {{ color_name }}
            </a>
          {% else %}
            <span class="ai-color-metafield__text-only-{{ ai_gen_id }}">
              {{ color_name }}
            </span>
          {% endif %}
        {% else %}
          <div class="ai-color-metafield__color-item-{{ ai_gen_id }}">
            {% if is_gradient and gradient_colors.size >= 2 %}
              <div 
                class="ai-color-metafield__swatch-{{ ai_gen_id }} ai-color-metafield__swatch-{{ ai_gen_id }}--gradient"
                style="
                  --color-1: {{ gradient_colors[0] | strip }};
                  --color-2: {{ gradient_colors[1] | strip }};
                "
                data-color="{{ color_value }}"
                data-name="{{ color_name }}"
                {% if variant_with_color %}data-variant-id="{{ variant_with_color.id }}"{% endif %}
              >
                {% if block.settings.show_tooltips %}
                  <div class="ai-color-metafield__tooltip-{{ ai_gen_id }}">{{ color_name }}</div>
                {% endif %}
              </div>
            {% elsif is_hex_color %}
              <div 
                class="ai-color-metafield__swatch-{{ ai_gen_id }}"
                style="background-color: {{ color_value }};"
                data-color="{{ color_value }}"
                data-name="{{ color_name }}"
                {% if variant_with_color %}data-variant-id="{{ variant_with_color.id }}"{% endif %}
              >
                {% if block.settings.show_tooltips %}
                  <div class="ai-color-metafield__tooltip-{{ ai_gen_id }}">{{ color_name }}</div>
                {% endif %}
              </div>
            {% else %}
              <div 
                class="ai-color-metafield__swatch-{{ ai_gen_id }} ai-color-metafield__swatch-{{ ai_gen_id }}--pattern"
                data-color="{{ color_value }}"
                data-name="{{ color_name }}"
                {% if variant_with_color %}data-variant-id="{{ variant_with_color.id }}"{% endif %}
              >
                {% if block.settings.show_tooltips %}
                  <div class="ai-color-metafield__tooltip-{{ ai_gen_id }}">{{ color_name }}</div>
                {% endif %}
              </div>
            {% endif %}
            
            {% if block.settings.show_labels %}
              <span class="ai-color-metafield__label-{{ ai_gen_id }}">{{ color_name }}</span>
            {% endif %}
          </div>
        {% endif %}
      {% endfor %}
    </div>
  {% endif %}
</color-metafield-card-{{ ai_gen_id }}>

<script>
  (function() {
    class ColorMetafieldCard{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
      }

      connectedCallback() {
        this.productId = this.dataset.productId;
        this.swatches = this.querySelectorAll('.ai-color-metafield__swatch-{{ ai_gen_id }}');
        this.textItems = this.querySelectorAll('.ai-color-metafield__text-only-{{ ai_gen_id }}');
        this.setupEventListeners();
      }

      setupEventListeners() {
        this.swatches.forEach((swatch) => {
          swatch.addEventListener('click', (e) => {
            e.preventDefault();
            e.stopPropagation();
            
            const colorValue = e.currentTarget.dataset.color;
            const colorName = e.currentTarget.dataset.name;
            const variantId = e.currentTarget.dataset.variantId;
            
            this.handleColorClick(colorValue, colorName, variantId, e.currentTarget);
          });
        });

        this.textItems.forEach((item) => {
          if (!item.href) {
            item.addEventListener('click', (e) => {
              e.preventDefault();
              e.stopPropagation();
              
              const colorName = e.currentTarget.textContent.trim();
              const variantId = e.currentTarget.dataset.variantId;
              
              this.handleColorClick(null, colorName, variantId, e.currentTarget);
            });
          }
        });
      }

      handleColorClick(colorValue, colorName, variantId, element) {
        this.dispatchEvent(new CustomEvent('colorSelected', {
          detail: {
            productId: this.productId,
            color: colorValue,
            name: colorName,
            variantId: variantId,
            element: element
          },
          bubbles: true
        }));

        element.style.transform = 'scale(0.9)';
        setTimeout(() => {
          element.style.transform = '';
        }, 150);

        if (variantId) {
          const productCard = this.closest('.card');
          if (productCard) {
            const productLink = productCard.querySelector('a[href*="/products/"]');
            if (productLink) {
              const baseUrl = productLink.href.split('?')[0];
              window.location.href = `${baseUrl}?variant=${variantId}`;
            }
          }
        }
      }
    }

    customElements.define('color-metafield-card-{{ ai_gen_id }}', ColorMetafieldCard{{ ai_gen_id }});
  })();
</script>

{% schema %}
{
  "name": "Product card colors",
  "tag": null,
  "settings": [
    {
      "type": "header",
      "content": "Data source"
    },
    {
      "type": "text",
      "id": "metafield_namespace",
      "label": "Metafield namespace",
      "default": "custom",
      "info": "The namespace of your color metafield"
    },
    {
      "type": "text",
      "id": "metafield_key",
      "label": "Metafield key",
      "default": "colors",
      "info": "The key of your color metafield"
    },
    {
      "type": "checkbox",
      "id": "use_variant_colors",
      "label": "Use variant colors as fallback",
      "default": true,
      "info": "Extract colors from product variants when metafield is empty"
    },
    {
      "type": "checkbox",
      "id": "link_to_variants",
      "label": "Link colors to variants",
      "default": true,
      "info": "Make color swatches clickable to select variants"
    },
    {
      "type": "textarea",
      "id": "fallback_colors",
      "label": "Fallback colors",
      "info": "Colors to show when no data is found. Format: #FF0000|Red, #00FF00|Green"
    },
    {
      "type": "header",
      "content": "Display settings"
    },
    {
      "type": "text",
      "id": "title",
      "label": "Title",
      "default": "Colors"
    },
    {
      "type": "select",
      "id": "layout",
      "label": "Layout",
      "options": [
        {
          "value": "stacked",
          "label": "Stacked"
        },
        {
          "value": "inline",
          "label": "Inline"
        }
      ],
      "default": "stacked"
    },
    {
      "type": "select",
      "id": "alignment",
      "label": "Color alignment",
      "options": [
        {
          "value": "left",
          "label": "Left"
        },
        {
          "value": "center",
          "label": "Center"
        },
        {
          "value": "right",
          "label": "Right"
        }
      ],
      "default": "left"
    },
    {
      "type": "select",
      "id": "display_style",
      "label": "Display style",
      "options": [
        {
          "value": "swatches",
          "label": "Color swatches"
        },
        {
          "value": "text_only",
          "label": "Text labels only"
        }
      ],
      "default": "swatches"
    },
    {
      "type": "select",
      "id": "color_style",
      "label": "Swatch style",
      "options": [
        {
          "value": "circle",
          "label": "Circle"
        },
        {
          "value": "square",
          "label": "Square"
        },
        {
          "value": "rounded",
          "label": "Rounded square"
        }
      ],
      "default": "circle"
    },
    {
      "type": "checkbox",
      "id": "compact_mode",
      "label": "Compact mode",
      "default": true,
      "info": "Reduce spacing for product cards"
    },
    {
      "type": "checkbox",
      "id": "show_labels",
      "label": "Show color labels",
      "default": false
    },
    {
      "type": "checkbox",
      "id": "show_tooltips",
      "label": "Show tooltips on hover",
      "default": true
    },
    {
      "type": "range",
      "id": "max_colors",
      "min": 3,
      "max": 10,
      "step": 1,
      "label": "Maximum colors to show",
      "default": 5
    },
    {
      "type": "header",
      "content": "Size and spacing"
    },
    {
      "type": "range",
      "id": "color_size",
      "min": 16,
      "max": 40,
      "step": 2,
      "unit": "px",
      "label": "Swatch size",
      "default": 24
    },
    {
      "type": "range",
      "id": "color_spacing",
      "min": 2,
      "max": 12,
      "step": 1,
      "unit": "px",
      "label": "Spacing between colors",
      "default": 6
    },
    {
      "type": "range",
      "id": "section_spacing",
      "min": 4,
      "max": 16,
      "step": 1,
      "unit": "px",
      "label": "Title to colors spacing",
      "default": 8
    },
    {
      "type": "range",
      "id": "padding",
      "min": 0,
      "max": 20,
      "step": 2,
      "unit": "px",
      "label": "Block padding",
      "default": 0
    },
    {
      "type": "range",
      "id": "top_margin",
      "min": 0,
      "max": 20,
      "step": 2,
      "unit": "px",
      "label": "Top margin",
      "default": 8
    },
    {
      "type": "range",
      "id": "border_radius",
      "min": 0,
      "max": 12,
      "step": 1,
      "unit": "px",
      "label": "Block border radius",
      "default": 0
    },
    {
      "type": "header",
      "content": "Swatch styling"
    },
    {
      "type": "range",
      "id": "border_width",
      "min": 0,
      "max": 3,
      "step": 1,
      "unit": "px",
      "label": "Swatch border width",
      "default": 1
    },
    {
      "type": "color",
      "id": "border_color",
      "label": "Swatch border color",
      "default": "#e6e6e6"
    },
    {
      "type": "range",
      "id": "hover_scale",
      "min": 1.0,
      "max": 1.2,
      "step": 0.1,
      "label": "Hover scale effect",
      "default": 1.1
    },
    {
      "type": "header",
      "content": "Typography"
    },
    {
      "type": "range",
      "id": "title_size",
      "min": 10,
      "max": 18,
      "step": 1,
      "unit": "px",
      "label": "Title size",
      "default": 14
    },
    {
      "type": "range",
      "id": "label_size",
      "min": 9,
      "max": 14,
      "step": 1,
      "unit": "px",
      "label": "Label size",
      "default": 11
    },
    {
      "type": "color",
      "id": "title_color",
      "label": "Title color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "label_color",
      "label": "Label color",
      "default": "#2c2d2e"
    },
    {
      "type": "header",
      "content": "Colors"
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Background color",
      "default": "rgba(0,0,0,0)"
    },
    {
      "type": "color",
      "id": "tooltip_bg_color",
      "label": "Tooltip background",
      "default": "#333333"
    },
    {
      "type": "color",
      "id": "tooltip_text_color",
      "label": "Tooltip text",
      "default": "#ffffff"
    },
    {
      "type": "header",
      "content": "Text-only style"
    },
    {
      "type": "range",
      "id": "text_border_radius",
      "min": 0,
      "max": 14,
      "step": 1,
      "unit": "px",
      "label": "Text border radius",
      "default": 14
    },
    {
      "type": "color",
      "id": "text_bg_color",
      "label": "Text background",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Text color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "text_border_color",
      "label": "Text border color",
      "default": "#e6e6e6"
    },
    {
      "type": "color",
      "id": "text_hover_bg_color",
      "label": "Text hover background",
      "default": "#f5f5f5"
    },
    {
      "type": "color",
      "id": "text_hover_color",
      "label": "Text hover color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "text_hover_border_color",
      "label": "Text hover border",
      "default": "#000000"
    }
  ],
  "presets": [
    {
      "name": "Product card colors"
    }
  ]
}
{% endschema %}